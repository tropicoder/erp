generator client {
  provider = "prisma-client-js"
  output   = "../src/shared/generated/tenant-client"
}

datasource db {
  provider = "postgresql"
  url      = env("TENANT_DATABASE_URL")
}

// Note: User data is stored in the main database
// This model represents tenant-specific user information and relationships
model TenantUser {
  id        String      @id @default(cuid())
  userId    String      @unique // Reference to main database user ID
  isActive  Boolean     @default(true)
  joinedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  groups    UserGroup[]
  roles     UserRole[]

  @@map("tenant_users")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id           String     @id @default(cuid())
  tenantUserId String
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenantUser   TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)

  @@unique([tenantUserId, roleId])
  @@map("user_roles")
}

model Group {
  id          String      @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parent      Group?      @relation("GroupHierarchy", fields: [parentId], references: [id])
  children    Group[]     @relation("GroupHierarchy")
  users       UserGroup[]

  @@map("groups")
}

model UserGroup {
  id           String     @id @default(cuid())
  tenantUserId String
  groupId      String
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tenantUser   TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)

  @@unique([tenantUserId, groupId])
  @@map("user_groups")
}

model ApiCallLog {
  id           String   @id @default(cuid())
  provider     String
  endpoint     String
  tokensUsed   Int
  cost         Decimal? @db.Decimal(10, 4)
  responseTime Int
  success      Boolean
  errorMessage String?
  createdAt    DateTime @default(now())

  @@map("api_call_logs")
}

model NotificationTemplate {
  id            String         @id @default(cuid())
  name          String         @unique
  type          String
  subject       String?
  body          String
  variables     Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@map("notification_templates")
}

model Notification {
  id           String               @id @default(cuid())
  templateId   String
  recipient    String
  type         String
  status       NotificationStatus   @default(PENDING)
  sentAt       DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime             @default(now())
  template     NotificationTemplate @relation(fields: [templateId], references: [id])

  @@map("notifications")
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}
